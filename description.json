{
    "Name" : "Semaphores",
    "ShortDescription" : "The Semaphores example shows how to use QSemaphore to control access to a circular buffer shared by a producer thread and a consumer thread.",
    "DownloadLocation" : "https://api.github.com/repos/marcobubke/semaphores/zipball/v1",
    "Icon" : "core.png",
    "Id" : 5,
    "Tags" : "core thread semaphore advanced",
    "ProjectFile" : "semaphores.pro",
    "DocumentationFile" : "http://qt-project.org/doc/qt-5/qtcore-semaphores-example.html",
    "LongDescription" : "<p>The producer writes data to the buffer until it reaches the end of the buffer, at which point it restarts from the beginning, overwriting existing data. The consumer thread reads the data as it is produced and writes it to standard error.</p><p>Semaphores make it possible to have a higher level of concurrency than mutexes. If accesses to the buffer were guarded by a QMutex, the consumer thread couldn't access the buffer at the same time as the producer thread. Yet, there is no harm in having both threads working on different parts of the buffer at the same time.</p><p>The example comprises two classes: Producer and Consumer. Both inherit from QThread. The circular buffer used for communicating between these two classes and the semaphores that protect it are global variables.</p><p>An alternative to using QSemaphore to solve the producer-consumer problem is to use QWaitCondition and QMutex. This is what the Wait Conditions Example does.</p>"
}
